from Crypto.Util.number import *

# -----------------------------------------------------------
# challenge part
# -----------------------------------------------------------

FLAG = b"IERAE{7de6b745404269a0d7b40955047921c6860e4438c73eb095090e75c8fb00cb51}"
f = bytes_to_long(FLAG)

p = random_prime(2^128)
Fp = GF(p)
a, b = Fp.random_element(), Fp.random_element()
E = EllipticCurve(Fp, [a, b])

print(a)
print(b)
print(p)

gens = list(E.gens())
if len(gens) < 2:
    gens.append(ZZ(Fp.random_element()) * E.gens()[0])

res = []
while f > 0:
    r = Fp.random_element()
    res.append(ZZ(r) * gens[f & 1])
    f >>= 1

for R in res:
    print(R.xy())


# -----------------------------------------------------------
# attack part
# -----------------------------------------------------------

inputs = []
a, b, p = a, b, p
for R in res:
    inputs.append((ZZ(R.xy()[0]), ZZ(R.xy()[1])))
Fp = GF(p)
E = EllipticCurve(Fp, [a, b])

gens = E.gens()

assert len(gens) == 2, "not split"

o1 = gens[1].order()
o0 = gens[0].order()
res = []
for R in inputs:
    R = E(R)
    try:
        e0 = gens[0].weil_pairing(R, o0)
    except:
        e0 = gens[0].weil_pairing(R, o1)
    try:
        e1 = gens[1].weil_pairing(R, o1)
    except:
        e1 = gens[1].weil_pairing(R, o0)
    if e0 == 1 and e1 != 1:
        res.append("0")
    elif e0 != 1 and e1 == 1:
        res.append("1")
    else:
        res.append("2")

res.reverse()
print("?? count:", res[47:-8].count("2"))
print("".join(res)[47:-8])

# -----------------------------------------------------------
# search part
# -----------------------------------------------------------
"""
?? count: 242
02110121021222200110210120112212221200222221011102110100221102220211020020110020202121002022021202210210221112020212200220120002221002020021021121100020001222020012022020221221001201212221020100210200222221002211211200112221021122202222202122122222001222200012222002212220202202222210222120212220002222000221201100121022222000210022212220220022211002022220222020222002202110210211010100122000022122212011020002222102001222122012012222100011202220202220011022202212202120000022200001222212221222122212212100210201
?? count: 252
00110222012202222112222100222212011002120022222202110202201202022222212020112020202102020011002002120212221122212112000102210202021022020212212121100012001221022012220002211001201121012022020202120220221202002012212222121222201202122021200102220212202101122021102002110110222122022110222102110122222122220221221222122002011220212221012202122022211221210122022000212020001222212211210200122200201222220022202001122202022221122022210121202022202120020220022021122012022120220012020001220012222200202022012100110022
...
"""

targets

target = ""
for i in range(len(targets[0])):
    res = "2"
    for j in targets:
        if j[i] == "0":
            res = "0"
            break
        elif j[i] == "1":
            res = "1"
            break
    target += res

print("?? count:", target.count("2"))
print(b"IERAE{" + long_to_bytes(int(target, 2)) + b"}")