from Crypto.Util.number import *
import timeout_decorator

# discrete_log version

# -----------------------------------------------------------
# challenge part
# -----------------------------------------------------------

FLAG = b"IERAE{7de6b745404269a0d7b40955047921c6860e4438c73eb095090e75c8fb00cb51}"
f = bytes_to_long(FLAG)

p = random_prime(2^128)
Fp = GF(p)
a, b = Fp.random_element(), Fp.random_element()
E = EllipticCurve(Fp, [a, b])

print(a)
print(b)
print(p)

gens = list(E.gens())
if len(gens) < 2:
    gens.append(ZZ(Fp.random_element()) * E.gens()[0])

res = []
while f > 0:
    r = Fp.random_element()
    res.append(ZZ(r) * gens[f & 1])
    f >>= 1

for R in res:
    print(R.xy())


# -----------------------------------------------------------
# attack part
# -----------------------------------------------------------

inputs = []
a, b, p = a, b, p
for R in res:
    inputs.append((ZZ(R.xy()[0]), ZZ(R.xy()[1])))
Fp = GF(p)
E = EllipticCurve(Fp, [a, b])

gens = E.gens()

assert len(gens) == 2, "not split"

@timeout_decorator.timeout(1)
def test(R, G):
    discrete_log(R, G, operation="+")

res = []
for R in inputs:
    R = E(R)

    try:
        test(R, gens[0])
    except ValueError:
        e0 = 2
    except timeout_decorator.timeout_decorator.TimeoutError:
        e0 = 1

    try:
        test(R, gens[1])
    except ValueError:
        e1 = 2
    except timeout_decorator.timeout_decorator.TimeoutError:
        e1 = 1

    if e0 == 1 and e1 != 1:
        res.append("0")
    elif e0 != 1 and e1 == 1:
        res.append("1")
    else:
        res.append("2")
    print("res:", res, len(res))


res.reverse()
print("?? count:", res[47:-8].count("2"))
print("".join(res)[47:-8])

# -----------------------------------------------------------
# search part
# -----------------------------------------------------------
"""
?? count: 184
20110212022222220110012102222222212000100222222200120220002102010022212000220000202102020012001020220112002210212110000100210000021001000022022102220022001102020022000000111002002221010222010202110020202202000211011222212022002120120021202201102011001201200022122020120210001100000222022102112200001101000011001100212000021000122012222200220211011002022220021002222020002210020012210120120000022210020022000202100101001122220012220102100021002120000210012021200010001120002022200202200222021002200021020100110201
?? count: 255
22112211021001222210010120212110212222202022021102122122202201012222222200110000202202202222201220220220221220212212220202220200011222202021211202200212221102220222222002112002221222212021222100110200002201020012212122211001002120220211200201102221002202122222222222110110021200202222010220212102222202202011222220211022221202210212022202110022012022022222022020122000022222010222010102220020021212210022002201120202201121110021022102100222021220200210211221120010021100220221000022120212221020120222012100120221
...
"""

targets


target = ""
for i in range(len(targets[0])):
    res = "2"
    for j in targets:
        if j[i] == "0":
            res = "0"
            break
        elif j[i] == "1":
            res = "1"
            break
    target += res

print("?? count:", target.count("2"))
print(b"IERAE{" + long_to_bytes(int(target, 2)) + b"}")
